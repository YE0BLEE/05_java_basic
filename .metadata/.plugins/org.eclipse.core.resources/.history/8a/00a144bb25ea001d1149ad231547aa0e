package com.lec.ex01_basic;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

/*
    JDBC를 이용한 자바와 DB 연동
    
    Java와 DB를 연동하기 위해서는 각 RDBMS의 버전에 맞는 JRE 실행환경 라이브러리를 
    Java프로젝트에 추가해야 한다. JDBC드라이버는 DB버전에 맞는 JDBC드라이버(오라클은 ojdbc.jar)를 
    추가해야 한다. Oracle JDBC의 버전별 참고 https://oingdaddy.tistory.com/372
    
    라이브러리 추가 방법
    1. Java프로젝트 우클릭
    2. Build Path > Configure Build Path > (TAB) Libraries > (BUTTON) Add Jars .. > (BUTTON) Apply & Close
    
    A. JDBC프로그램 작성
    
    1. JDBC드라이버 로드(DB에 따라 드라이버가 상이)
    
      a. Oracle 드라이버 로딩: Class.forName("oracle.jdbc.OracleDriver");
      b. mariadb 드라이버 로딩: Class.forName("org.maridb.jdbc.Driver");
      c. MySQL 드라이버 로딩: Class.forName("com.mysql.jdbc.driver");
      
      Class.forName()메서드는 드라이버를 읽기만 하면 자동으로 객체가 생성되고,
      DriverManager에 등록이 된다.
    
    2. Connection객체 생성
    
      Connection객체에 연결하는 것은 DriverManager에 등록된 각 드라이버를 
      getConnection()메서드를 이용해서 식별한다. getConnection()메서드의 매개값은
      DB의 URL주소,사용자ID, 비밀번호를 전달한다. 연결할 때 URL 식별자정보를 이용해서
      Mapping을 하고 찾지 못했을 경우에는 no suitable error가 발생한다.
      찾았을 경우에는 getConnection(String url ...)메서드의 수행 결과가 Connection객체에 전달된다.
      
      getConnection(String url, String user, String password)
      a. Oracle: getConnection("jdbc:oracle:thin:@오라클DB주소:port번호:서비스id", "사용자ID", "비밀번호");
      b. mariadb: getConnection("jdbc:mariadb://마리아DB주소/db이름", "사용자ID", "비밀번호");
      c. MySQL: getConnection("jdbc:mysql://마이SQLDB주소/db이름", "사용자ID", "비밀번호"); 
    
    3. Statement(Statement/PreparedStatement/CallableStatement) 객체 생성
    
      SQL 생성 및 실행하면 반환된 결과를 가져오게 할 작업영역을 제공한다.
      Statement객체는 Connection객체의 createStatement()메서드를 사용하여 생성한다.
      
      이 단계부터는 JDBC드라이버에 구애를 받지 않는다. 즉, DB와 상관없이 
      동일한 명령으로 사용할 수 있다. 단, SQL표준문법을 준수할 경우에는 동일한 명령을 사용할 수 있지만,
      DB마다 고유한 SQL명령이라면 각 DB의 문법에 맞게 작성해야 한다.
      
      Statement stmt = conn.createStatement();
      PreparedStatement pstmt = conn.createStatement();
      CallableStatement cstmt = conn.preparedCall("{call 스토어드프로시져(?,?,? ...)}");
    
    4. Query 실행
    
      Statement객체가 생성된 후에 Statement객체의 
      executeQuery(), executeUpdate()메서드를 사용하여 처리한다.
      
      ResultSet rs = stmt.executeQuery("select * from emp where empno = 7369");
      ResultSet rs = pstmt.executeQuery("select * from emp where emp = ?");
      ResultSet rs = cstmt.execute();      
      
    5. ResultSet 처리
    
      executeQuery()메서드 결과를 ResultSet으로 리턴한다. 이 ResultSet으로 부터 읽은 데이터를
      추출하는 과정이 ResultSet을 처리하는 과정이다. 
      
      데이터를 추출하는 방법은 ResultSet에서 한 행(row)씩 이동하면서 getXXX()메서드를 이용하여
      데이터를 추출하는데 이 때 rs.getInt(1) or rs.getString("컬럼명") 메서드로 한 컬럼의 정보를 추출한다.
    
    B. JDBC에서 사용되는 객체
    
    1. DriverManager 클래스
    
      DriverManager클래스는 데이터 원본에 JDBC드라이버를 통해 Connectgion을 만드는 역할을 한다. 
      DriverManger클래스는 Class.forName()메서드를 통해 생성되는데
      이 메서드는 인터페이스 드라이버를 구현하는 작업을 한다.
      
      Class.forName()처럼 특정 클래스를 로드하면 자동으로 객체가 생성되고 DriverManager에 등록된다.
      드라이버를 찾지 못했을 경우에는 forNmae()메서드는 ClassNotFoundException예외가 발생하기 떄문에
      반드시 예외처리를 해야 한다.
      
      일반적으로 드라이버 클래스들은 로드될 때 자신의 인스턴스를 생성하고 자동으로 DriverManager클래스의
      메서드를 호출하여 그 인스턴스를 등록한다. DriverManager클래스의 모든 메서드는 static메서드이기
      때문에 객체를 생성할 필요없이 바로 사용할 수 있다.
      
      DriverManager클래스는 Connection인터페이스의 구현객체를 생성하는데, getConnection()메서드를 사용한다.
    
    2. Connection 인터페이스
    
      특정 데이터 원본에 대한 커넥션은 Connection인터페이스가 구현된 클래스의 객체로 표현된다.
      특정의 SQL문을 실행시키기 전에 우선 Connection객체가 있어야 한다. Connection객체는 
      특정 데이터 원본과 연결된 커넥션을 나타내고 특정 SQL문을 정의하고 실행시킬 수 있는 
      Statement객체를 생성할 때도 Connection객체를 사용한다.
      
      또한, Connection객체는 데이터베이스에 대한 데이터인 메터데이터베이스에 관한 정보를 데이터 원본에
      질의하는데 사용한다. 이 때는 사용 가능한 테이블의 이름, 특정 테이브르이 컬럼 정보를 포함한다.
    
    3. Statement 인터페이스
    
      Statement인터페이스는 Connection에 의해 프로그램에 리턴되는 객체에 구현되는 일정의 메서드 집합을
      의미한다. Statement객체는 Statement인터페이스를 구현한 객체로서 항상 인수가 없는 createStatement()
      메서드를 호출함으로서 얻어진다.
      
      try {
          Statement stmt = conn.createStatement();
      } catch (...) {
          ...
      }
      
      일단, Statement객체를 생성하면 Statement.executeQuery()메서드를 호출해서 SQL질의를 실행시킬 수 있다.
      메서드의 매개값으로 SQL문을 담은 String객체를 전달한다. 
      Statement객체는 단순 질의문을 사용하는 것이 좋다.
    
    4. PreparedStatement 인터페이스
    
      PreparedStatement인터페이스는 Connection객체의 prepareStatement()메서드를 사용해서 
      객체를 생성한다. PreparedStatement객체는 SQL문이 사전에 컴파일되어 실행시간 동안 
      파라미터값을 위한 공간을 확보한다는 점에서 Statement객체와 구별된다.
      
      PreparedStatement객체는 동일한 질의문을 특정값만 변경해서 여러번 반복 실행해야 할 때,
      많은 데이터를 다루기 때문에 SQL문을 정리해야 할 필요가 있을때, 파라미터값이 많아서 SQL문을
      정리해야 할 필요가 있을 때 사용하면 유용하다. 또한, Statement객체의 SQL은 실행할 때 마다
      DB서버에서 분석되어야 하지만 
      PreparedStatement객체는 한 번만 분석(컴파일)되면 재사용할 수 있다는 장점이 있다.
      
      PreparedStatement인터페이스는 각각의 매개값의 위치홀더(placeholder, ?)를 사용하여
      SQL문을 정의할 수 있게 해준다. 위치홀더는 물음표?로 표현된다. 위치홀더는 SQL문에 나타나는
      토큰token인데 이 것은 SQL문장이 실행되기 전에 실제값으로 대체된다.
      이런 방법을 사용하면 특정값으로 문자열을 연결하는 방법 보다 훨씬 쉽게 SQL문을 만들 수 있다.
      
      PreparedStatement객체는 각각의 SQL타입을 처리할 수 있는 setXXX()메서드를 제공한다.
      여기서 XXX는 해당 테이블의 데이터타입과 관련이 있다. 해당 필드의 데이터타입이 문자열이면
      setString()이 되고 숫자값일 경우는 setInt(), setDouble()이 된다. setXXX(num, value)메서드는 
      2개의 매개값을 가지고 있는데 num은 파라미터인덱스(placeholder의 위치)이고 위치홀더와 대응된다.
      
      PreparedStatement객체가 제공하는 메서드는
      setString, setInt, setLong, setDouble, setFloat, setDate, setTimestamp, setObject가 있다.
      
      PreparedStatement의 장점
      1. 동일한 SQL문을 특정값만 변경해서 여러번 실행해야 할 경우, 많은 데이터를 처리할 경우,
         SQL문을 정리해야 할 필요가 있을 때, 파라미터가 많아서  SQL문을 간소화 시킬 필요가 있을 때
         사용이 편리하다.
      2. 사전에 컴파일되기 때문에 쿼리의 실행속도가 Statement객체 보다 빠르다.
      3. Statement객체는 쿼리 실행시 작은 따옴표'가 있으면 작은 따옴표 2개로 표시해야 하는
         번거로움이 있지만, PreparedStatement객체는 작은 따옴표의 문제를 쿼리 실행시에 
         자동으로 처리하기 때문에 신경 쓸 필요가 없다.
    
    5. CallableStatement 인터페이스
    
      CallableStatement인터페이스는 Connection객체의 prepareCall()메서드를 사용해서 객체를 생성한다.
      CallableStatement객체는 주로 스토어드프로시저(Stored Procedure, function)를 실행하기 위해 사용한다.
    
    6. ResultSet 인터페이스
    
    
    7. JDBC 트랜젝션 
    
    
    
*/

public class JDBCConnectionMain {

	final static String DRV = "oracle.jdbc.OracleDriver";
	final static String URL = "jdbc:oracle:thin:@localhost:1521:xe";
	final static String USR = "scott";
	final static String PWD = "TIGER";
	
	public static void main(String[] args) {
		
		Connection conn = null;  // Connection객체 생성
		Statement stmt = null;
		ResultSet rs = null;
		
		try {
			Class.forName("oracle.jdbc.OracleDriver");
			conn = DriverManager.getConnection(URL, USR, PWD);
			System.out.println("DB connect success");
			
			stmt = conn.createStatement();
			rs = stmt.executeQuery("select * from emp where empno = 7369");
			rs.next();
			int empno = rs.getInt(1);
			String ename = rs.getString("ename");
			System.out.println(empno + ", " + ename);
			
		} catch (Exception e) {
			System.out.println("DB connect failed");
			e.printStackTrace();
		}  // ClassLoader가 메모리(힙)영역에 Connection객체를 로딩 (예외처리 or try-catch)
		finally {
			try {
				if(rs != null) rs.close();
				if(stmt != null) stmt.close();
				if(conn != null) conn.close();
			} catch (Exception e) {
				// dummy
				
			}
			

		}

	}

}












