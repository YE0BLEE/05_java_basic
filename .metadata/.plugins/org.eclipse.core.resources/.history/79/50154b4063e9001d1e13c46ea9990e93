package com.lec.ex03_channel;

/*
    File Channel
    
    java.nio.channel.FileChannel 클래스를 이용하면 파일 읽기와 쓰기를 할 수 있다.
    FileChannel은 동기화 처리가 되어있기 때문에 멀티쓰레드환경에서 사용해도 안전하다.
    
    1. FileChannel 생성과 닫기
    
       FileChannel.open() 정적메서드 호출 또는 File.FileInputStream, FileOutputStream의
       getChannel()메서드를 호출해서 FileChannel객체를 생성할 수 있다.
       
       사용법은 FileChannel.open(Path path, OpenOption...) 으로 열기를 하는데
       OpenOption운 READ, CREATE, CREATE_NOW, APPEND, DELETE_ON_CLOSE, WRITE, TRUNCATED_EXISTING 등이 있다.
       그리고 더 이상 파일을 사용하지 않을 경우에는 close()메서드를 호출해서 시스템 자원을 해제해야 한다.
    
    2. 파일 읽기와 쓰기
    
       파일에 바이트데이터를 쓰려면 FileChannel.write() 메서드를 호출한다. 매개값을 ByteBuffer객체를
       전달하는데 파일에 쓰여지는 바이트는 ByteBuffer의 position에서 limit까지 이다.
       position은 0이고 limit가 capacity와 동일하다면 모든 바이트 데이터가 파일에 쓰여지게 된다.
       
       파일로 부터 데이터를 읽기 위해서는 read()메서드를 호출하면 된다. 매개값으로 ByteBuffer가
       주어지고 현재 position에서 
    
    3. 파일 복사
*/

public class FileChannelMain1 {

	public static void main(String[] args) {
		
		

	}

}














